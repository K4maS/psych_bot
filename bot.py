import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from config import TELEGRAM_BOT_TOKEN
from sheets import *
from util import create_answers_format, make_question_handler, global_step_changer, message_replay, navigation, reset
from seance_data import *
from gpt_analysis_openrouter import *
from supabase_client import (
    supabase,
    get_row_from_patients_db,
    get_row_from_psycho_by_psychoid_db,
    get_row_from_psycho_by_uid_db,
    insert_row_to_patients_db,
    insert_row_to_psycho_db,
    get_table_linked_to_psycho,
 )
from telegram.error import TelegramError


logging.basicConfig(filename="errors.log", level=logging.ERROR)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", exc_info=context.error)

    if update and isinstance(update, Update) and update.message:
        try:
            await update.message.reply_text("üö´ –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        except TelegramError:
            pass  # –µ—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ

 
# –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏
# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    user_id = update.message.from_user.id
    print("[BOT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤–≤–æ–¥ –∫–æ–¥–∞.")
    row = await get_row_from_patients_db(user_id)
    next_step = STEP_PSYCHO_CODE if row is None else STEP_CODE

    await update.message.reply_text(steps[next_step]['question'],  reply_markup=reply_markup_menu)
    return global_step_changer(steps[next_step]['component'], update, context)


async def psych_set_table_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    link = update.message.text.strip()
    username = update.message.from_user.username
    user_id = update.message.from_user.id

    # –í—Å—Ç–∞–≤–∫–∞ –≤ –±–∞–∑—É
    row = await insert_row_to_psycho_db(user_id, {'name': username, 'table': link})

    if row is None:
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        return global_step_changer(steps[STEP_PSYCHO_TABLE]['component'], update, context)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –ø–æ user_id
    psycho_row = await get_row_from_psycho_by_uid_db(user_id)

    if psycho_row is None or 'psychologist_id' not in psycho_row:
        await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞')
        return global_step_changer(steps[STEP_PSYCHO_TABLE]['component'], update, context)

    psychologist_id = psycho_row['psychologist_id']  # <-- –≤–æ—Ç –æ–Ω, –Ω—É–∂–Ω—ã–π id

    await update.message.reply_text(f'–í–∞—à –∫–æ–¥ –ø—Å–∏—Ö–æ–ª–æ–≥–∞: {psychologist_id}')
    # return  global_step_changer(steps[STEP_START]['component'], update, context)

async def get_psycho_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    username = update.message.from_user.username
    user_id = update.message.from_user.id

    if code == '–î–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞':
        return global_step_changer(STEP_PSYCHO_TABLE, update, context)
    elif code == '–°–º–µ–Ω–∏—Ç—å –∫–æ–¥ –ø—Å–∏—Ö–æ–ª–æ–≥–∞':
        return global_step_changer(STEP_PSYCHO_CODE, update, context)

    row = await get_row_from_psycho_by_psychoid_db(code)

    if row is None:
        await update.message.reply_text("–ö–æ–¥ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥.")

    else:
        await insert_row_to_patients_db(user_id, {"psychologist_id": code, "name": username})
    await update.message.reply_text("–ö–æ–¥ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞—à–µ–π –ø–∞—Ä—ã:", reply_markup=ReplyKeyboardRemove())
    print(f"[BOT] –ö–æ–¥ {code} –ø—Ä–∏–Ω—è—Ç, —Å—Ç—Ä–æ–∫–∞ {row}")
    return global_step_changer(STEP_CODE, update, context)

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç–∞–±–ª–∏—Ü—ã
# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç–∞–±–ª–∏—Ü—ã, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º
async def write_spreadsheet_id_in_context(user_id, context):
        sheet_link = await get_table_linked_to_psycho(user_id)
        sheet_id = extract_spreadsheet_id(sheet_link)
        context.user_data["sheet_id"] = sheet_id
        return sheet_id

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞
# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def get_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
   
    code = update.message.text.strip()
    user_id = update.message.from_user.id

    if code == '–î–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞':
        return global_step_changer(STEP_PSYCHO_TABLE, update, context)
    elif code == '–°–º–µ–Ω–∏—Ç—å –∫–æ–¥ –ø—Å–∏—Ö–æ–ª–æ–≥–∞':
        return global_step_changer(STEP_PSYCHO_CODE, update, context)

    await write_spreadsheet_id_in_context(user_id, context)
    sheet_id = context.user_data.get("sheet_id")

    row = find_row_by_code(code, sheet_id)

    if row is None:
        await update.message.reply_text("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return  global_step_changer(STEP_CODE, update, context)
 
    summary = read_column(row, SUMMARY, sheet_id)
    if summary:
        await update.message.reply_text("–≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥.")
        return  global_step_changer(STEP_CODE, update, context)

    user_sessions[user_id] = {"code": code, "row": row}
    await update.message.reply_text(steps[STEP_DEVICE]['question'], reply_markup=reply_markup)
    print(f"[BOT] –ö–æ–¥ {code} –ø—Ä–∏–Ω—è—Ç, —Å—Ç—Ä–æ–∫–∞ {row}")
    return  global_step_changer(STEP_DEVICE, update, context)

# –í—ã–±—Ä–æ —Ä–µ–∂–∏–º–∞ —Å–µ–∞–Ω—Å–∞  
# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def choose_device(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    user_id = update.message.from_user.id
    session = user_sessions[user_id]

    sheet_id = context.user_data.get("sheet_id")
    row = session["row"]
    choice_lower = choice.lower()

    if "—Å–≤–æ–∏" in choice_lower:
        session["device"] = "one"
    elif "–ø–∞—Ä—ã" in choice_lower:
        session["device"] = "two"
    elif reset_action.lower() in choice_lower:
        return await reset(update, context)
    else:
        return  global_step_changer(STEP_DEVICE, update, context)
    uid_1, msg_1, uid_2, msg_2 = read_messages(row, sheet_id)

    if session["device"] == "two" and msg_1 and uid_1:
        await update.message.reply_text("–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –≤–≤–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å:", reply_markup=reply_markup_back_reset)
        session["is_first"] = False

    else:
        session["is_first"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=reply_markup_back_reset)
    await message_replay(steps[first_question], update, context)
    return  global_step_changer(first_question, update, context)    
 
# –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def get_message1(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user_id = update.message.from_user.id
    session = user_sessions[user_id]
    sheet_id = context.user_data.get("sheet_id")
    row = session["row"]
    device = session["device"]

    message = update.message.text.strip()
    is_first = True
    users_actions = context.user_data.get("users_actions", [None] * len(steps))

    questions_cut = Q_3 if device == "one" else STEP_MSG1
    message_with_answers = create_answers_format(steps, users_actions, context, Q_1, questions_cut ) + message
    print(f"[BOT] Message1: {update.message.text}")
    if message == reset_action or message == back_action:
        return await navigation(message, update, context)
    
    uid_1, msg_1, uid_2, msg_2 = read_messages(row, sheet_id)

    if msg_1 and uid_1 and device != "one":
        is_first = False
    print(f'get_message sheet id {sheet_id}')
    write_message(row, user_id, message_with_answers, sheet_id, is_first)
    
    uid_2 = update.message.chat.id
    msg_2 = message_with_answers
    
    print(f'get_message1 "uid_1 {uid_1}, msg_1 {msg_1}, uid_2 {uid_2}, msg_2 {msg_2}')
    print(f"[BOT] –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É {row}")
    return await do_analysis(update, context,  device, row)



async def do_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE, device, row):
    await update.message.reply_text("–î–µ–ª–∞–µ–º –∞–Ω–∞–ª–∏–∑, –ø–æ–¥–æ–∂–¥–∏—Ç–µ",  reply_markup=ReplyKeyboardRemove())
    sheet_id = context.user_data.get("sheet_id")

    try:
        uid_1, msg_1, uid_2, msg_2 = read_messages(row, sheet_id)

        if (msg_1 and msg_2) or  msg_1 and device == "one":
           await analysis_and_send_message_to_users(uid_1, msg_1, uid_2, msg_2, row, context, update)
        else:
            await update.message.reply_text("–û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.", reply_markup= reply_markup_end)
    except Exception as e:
        logging.error(f"[BOT] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.", reply_markup= reply_markup_end)
    return  global_step_changer(STEP_END, update, context)

# –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
async def analysis_and_send_message_to_users(uid_1, msg_1, uid_2, msg_2, row, context, update):
    sheet_id = context.user_data.get("sheet_id")
    try:
        about_user1 = call_gpt_user(sheet_id, msg_1)
        write_user1_analysis(row, about_user1, sheet_id)

        print(sheet_id)
        print(f"[GPT] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {msg_2}")
        if msg_1 and not msg_2:
            print(f"[GPT] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {uid_1}")
            summary = call_gpt_single(sheet_id, msg_1)
            write_summary(row, summary, sheet_id)
            
            to_pair_rec = call_gpt_to_single(sheet_id, msg_1)
            write_recommendation(row, to_pair_rec, sheet_id)
            
            to_psych_rec = call_gpt_single_to_psychologist(sheet_id, msg_1)
            write_recommendation_to_psychologist(row, to_psych_rec, sheet_id)
        else: 
            print(f"[GPT] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—É: {uid_1} –∏ {uid_2}")
            about_user2 = call_gpt_user(sheet_id, msg_2)
            write_user2_analysis(row, about_user2, sheet_id)
            
            summary = call_gpt_pair(sheet_id, msg_1, msg_2)
            write_summary(row, summary, sheet_id)
            
            to_pair_rec = call_gpt_to_pair(sheet_id, msg_1, msg_2)
            write_recommendation(row, to_pair_rec, sheet_id)
            
            to_psych_rec = call_gpt_pair_to_psyhologist(sheet_id, msg_1, msg_2)
            write_recommendation_to_psychologist(row, to_psych_rec, sheet_id)
        
        if uid_1:
            await context.bot.send_message(chat_id=int(uid_1), text="‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Å–∏—Ö–æ–ª–æ–≥ –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—é–º–µ.", reply_markup=reply_markup_end)
        if uid_2 and uid_2 != uid_1:
            await context.bot.send_message(chat_id=int(uid_2), text="‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Å–∏—Ö–æ–ª–æ–≥ –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—é–º–µ.", reply_markup=reply_markup_end)
        print(f"[GPT] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω.")
      
    except Exception as e:
        logging.error(f"[GPT] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=reply_markup_end)
        return
  
    
# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def ending(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        session = user_sessions[user_id]
        message = update.message.text.strip()

        if message == reset_action:
            return await reset(update, context)
        return  global_step_changer(STEP_END, update, context)
    except Exception as e:
        logging.error(f"[BOT] –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ü–µ —Å–µ—Å—Å–∏–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ü–µ —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=reply_markup_end)
        return global_step_changer(STEP_END, update, context)


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é-–∫–æ–º–∞–Ω–¥
async def set_menu_commands(app):
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("reset", "–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"),
        BotCommand("link", "–ó–∞–ø–∏—Å–∞—Ç—å/–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –ø—Å–∏—Ö–æ–ª–æ–≥–∞")
    ]
    await app.bot.set_my_commands(commands)

async def link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(steps[STEP_PSYCHO_TABLE]['question'], reply_markup=reply_markup_end)
    return global_step_changer(STEP_PSYCHO_TABLE, update, context)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    print("[–°–¢–ê–¢–£–°] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            STEP_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, start)],
            STEP_PSYCHO_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_psycho_code)],
            STEP_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_code)],
            STEP_DEVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_device)],
            STEP_MSG1: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_message1)],
            STEP_END: [MessageHandler(filters.TEXT & ~filters.COMMAND, ending)],
            Q_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, make_question_handler(Q_1))],
            Q_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, make_question_handler(Q_2))],
            Q_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, make_question_handler(Q_3))],
            Q_4: [MessageHandler(filters.TEXT & ~filters.COMMAND, make_question_handler(Q_4))],
            Q_5: [MessageHandler(filters.TEXT & ~filters.COMMAND, make_question_handler(Q_5))],
            Q_6: [MessageHandler(filters.TEXT & ~filters.COMMAND, make_question_handler(Q_6))],
            Q_7: [MessageHandler(filters.TEXT & ~filters.COMMAND, make_question_handler(Q_7))],
            Q_8: [MessageHandler(filters.TEXT & ~filters.COMMAND, make_question_handler(Q_8))],
            STEP_PSYCHO_TABLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, psych_set_table_link)],
        },
        fallbacks=[CommandHandler("reset", reset)]
    )


    app.add_handler(conv)

    app.add_error_handler(error_handler)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("link", link))
    app.post_init = set_menu_commands

    print("[–°–¢–ê–¢–£–°] –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
   



if __name__ == "__main__":
    main()